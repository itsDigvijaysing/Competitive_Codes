DC

import pandas as pd
import numpy as np

#reading Dataset
dataset=pd.read_csv("a2.csv")
X=dataset.iloc[:,:-1]
y=dataset.iloc[:,5]

#Perform Label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

X=X.apply(le.fit_transform)
print(X)


from sklearn.tree import DecisionTreeClassifier
regressor=DecisionTreeClassifier()
regressor.fit(X.iloc[:,1:5],y)

#Predict value for the given Expression
X_in=np.array([1,1,0,0])
y_pred=regressor.predict([X_in])
print("Prediction:", y_pred)

from sklearn import tree
tree.plot_tree(regressor,filled=True)
fig.savefig('DC.png')

KM

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df = pd.DataFrame({'X': [0.1, 0.15, 0.08, 0.16, 0.2, 0.25, 0.24, 0.3],
                   'y': [0.6, 0.71, 0.9, 0.85, 0.3, 0.5, 0.1, 0.2]})
f1 = df['X'].values
f2 = df['y'].values
X = np.array(list(zip(f1, f2)))
print(X)

C_x = np.array([0.1, 0.3])
C_y = np.array([0.6, 0.2])
centroids = C_x, C_y

colmap = {1: 'r', 2: 'b'}
plt.scatter(f1, f2, color='k')
plt.show()

olmap = {1: 'r', 2: 'b'}
plt.scatter(f1, f2, color='k')
plt.show()

plt.scatter(C_x[0], C_y[0], color=colmap[1])
plt.scatter(C_x[1], C_y[1], color=colmap[2])
plt.show()

C = np.array(list((C_x, C_y)), dtype=np.float32)
print(C)

plt.scatter(f1, f2, c='#050505')
plt.scatter(C_x[0], C_y[0], marker='*', s=200, c='r')
plt.scatter(C_x[1], C_y[1], marker='*', s=200, c='b')
plt.show()

from sklearn.cluster import KMeans

model = KMeans(n_clusters=2, random_state=0)
model.fit(X)
labels = model.labels_
print(labels)

count = 0
for i in range(len(labels)):
    if (labels[i] == 1):
        count = count + 1

print('No of population around cluster 2:', count - 1)

# Find new centroids
new_centroids = model.cluster_centers_

print('Previous value of m1 and m2 is:')
print('M1==', centroids[0])
print('M1==', centroids[1])

print('updated value of m1 and m2 is:')
print('M1==', new_centroids[0])
print('M1==', new_centroids[1])


LR:

import matplotlib.pyplot as plt
import pandas as pd

# Read Dataset
dataset=pd.read_csv("LR.csv")
X=dataset.iloc[:,:-1].values
y=dataset.iloc[:,1].values

# Import the Linear Regression and Create object of it
from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(X,y)
Accuracy=regressor.score(X, y)*100
print("Accuracy :")
print(Accuracy)

# Predict the value using Regressor Object
y_pred=regressor.predict([[10]])
print(y_pred)

hours=int(input('Enter the no of hours'))

print(hours)

eq=regressor.coef_*hours+regressor.intercept_
y='%f*%f+%f' %(regressor.coef_,hours,regressor.intercept_)
print("y :")
print(y)
print("Risk Score : ", eq[0])

plt.plot("X","y",'o',color='r')
plt.plot(X,regressor.predict(X));
plt.show()

KNN

#import the packages
import pandas as pd
import numpy as np

#Read dataset
dataset=pd.read_csv("KNN.csv")
X=dataset.iloc[:,:-1].values
y=dataset.iloc[:,2].values

#import KNeighborshood Classifier and create object of it
from sklearn.neighbors import KNeighborsClassifier
classifier=KNeighborsClassifier(n_neighbors=3)
classifier.fit(X,y)

#predict the class for the point(6,6)
X_test=np.array([6,6])
y_pred=classifier.predict([X_test])
print('General KNN',y_pred)

classifier=KNeighborsClassifier(n_neighbors=3,weights='distance')
classifier.fit(X,y)

#predict the class for the point(6,6)
X_test=np.array([6,2])
y_pred=classifier.predict([X_test])
print('Distance Weighted KNN',y_pred)